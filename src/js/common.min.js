
document.addEventListener(
	"DOMContentLoaded", () => {
		function loadData() {
	return new Promise((resolve, reject) => {
	  	// setTimeout не является частью решения
	  	// Код ниже должен быть заменен на логику подходящую для решения вашей задачи
		setTimeout(resolve, 100);
	})
};

loadData()
	.then(() => {
		let preloaderEl = document.getElementById('preloader');
		preloaderEl.classList.add('hidden');
		preloaderEl.classList.remove('visible');
	});if (document.querySelector('.js-burger')) {

    const btnBurger = document.querySelectorAll('.js-burger');

    // Открыть / закрыть бургер по клику на него
    function btnBurgerToggle(e) {
        e.target.classList.toggle('toggle');
    }

    // При ресайзе возвращаем кнопки в исходное состояние
    // function btnBurgerToggleClassRemove() {
    //     btnBurger.forEach(element => {
    //         element.classList.remove('toggle');
    //     });
    // }

    btnBurger.forEach(element => {
        element.addEventListener("click", btnBurgerToggle);
        // window.addEventListener("resize", btnBurgerToggleClassRemove);
    });
}

// по клику на .js-catalog-open-btn открываем / закрываем меню с категориями каталога
if (document.querySelector('.js-catalog-open-btn')) {
    const catalogOpenBtn = document.querySelectorAll('.js-catalog-open-btn');

    // Открыть / закрыть подменю по клику на .js-catalog-open-btn
    function toggleOpen(e) {

        const toggleBtn = (this.closest('.js-catalog-open-btn'));
        const toggleBody = toggleBtn.nextElementSibling;

        toggleBody.classList.toggle('toggle');
    }

    catalogOpenBtn.forEach(element => {
        element.addEventListener("click", toggleOpen);
        // window.addEventListener("resize", btnBurgerToggleClassRemove);
    });
}



// Инициализация Inputmask
// https://github.com/RobinHerbots/Inputmask

function initInputMask() {
	let formPhone = document.querySelectorAll('.form__phone');
	formPhone.forEach(element => {
		Inputmask({ "mask": "+7 (999) 999-99-99" }).mask(element);
	});
}

initInputMask();

// Инициализация just-validate
// https://github.com/horprogs/Just-validate
// https://just-validate.dev/

function initJustValidatHelpForme() {
	const validation = new JustValidate('.help__form');

	validation
		.addField('.form__phone', [
			{
				rule: 'required',
				errorMessage: 'Введите телефон!',
			},
		])
		.addField('.form__agreement', [
			{
				rule: 'required',
				errorMessage: 'Подтвердите согласие на обработку персональных данных!',
			},
		])
		.addField('.form__email', [
			{
				rule: 'required',
				errorMessage: 'Email обязателен!',
			},
			{
				rule: 'email',
				errorMessage: 'Email не корректен!',
			},
		])
}

if (document.querySelector('.help__form')) {
	initJustValidatHelpForme();
}

function initJustValidatRegistrationForm() {
	const validation = new JustValidate('.registration__form');

	validation
		// .addField('.form__name', [
		// 	{
		// 		rule: 'required',
		// 		errorMessage: 'Введите имя!',
		// 	},
		// 	{
		// 		rule: 'minLength',
		// 		value: 3,
		// 		errorMessage: 'Минимум 3 символа',
		// 	},
		// 	{
		// 		rule: 'maxLength',
		// 		value: 30,
		// 		errorMessage: 'Максимум 30 символов',
		// 	},
		// ])
		.addField('.form__name', [
			{
				rule: 'required',
				errorMessage: 'Введите имя!',
			},
		])
		.addField('.form__phone', [
			{
				rule: 'required',
				errorMessage: 'Введите телефон!',
			},
		])
		.addField('.form__agreement', [
			{
				rule: 'required',
				errorMessage: 'Подтвердите согласие на обработку персональных данных!',
			},
		])
		.addField('.form__email', [
			{
				rule: 'required',
				errorMessage: 'Email обязателен!',
			},
			{
				rule: 'email',
				errorMessage: 'Email не корректен!',
			},
		])
	// .onSuccess((event) => {

	// 	// sentForm();
	// 	// Когда валидация прошла, отправляем форму
	// 	let element = event.target;
	// 	let formData = new FormData(element);
	// 	let xhr = new XMLHttpRequest();
	// 	xhr.onreadystatechange = function () {
	// 		if (xhr.readyState === 4) {
	// 			if (xhr.status === 200) {
	// 				console.log('Отправлено');
	// 				// Закрываем модалку
	// 				element.closest('.modal').classList.remove('show');
	// 				// Показываем другую модалку с ссобщением об успещной отправке
	// 				document.getElementById('modal-05').classList.add('show');
	// 			}
	// 		}
	// 	}

	// 	xhr.open('POST', 'mail.php', true);
	// 	xhr.send(formData);

	// 	element.reset();

	// });
}

if (document.querySelector('.registration__form')) {
	initJustValidatRegistrationForm();
}

function initJustValidatGoodDeal() {
	const validation = new JustValidate('.good-deal__form');

	validation
		.addField('.form__phone', [
			{
				rule: 'required',
				errorMessage: 'Введите телефон!',
			},
		])
		.addField('.form__agreement', [
			{
				rule: 'required',
				errorMessage: 'Подтвердите согласие на обработку персональных данных!',
			},
		])
}

if (document.querySelector('.good-deal__form')) {
	initJustValidatGoodDeal();
}// Инициализация слайдера swiper
// https://swiperjs.com/

function initSwiper() {

	if (document.querySelector('.jsReviewsSlider')) {
		const jsReviewsSlider = new Swiper('.jsReviewsSlider', {
			spaceBetween: 20,
			slidesPerView: 2,
			loop: true,

			navigation: {
				nextEl: ".reviews__next",
				prevEl: ".reviews__prev",
			},
		});
	};
};

// window.addEventListener("resize", initSwiper);
window.addEventListener("resize", function () {
	initSwiper();
});

initSwiper();


const accordeonItems = document.querySelectorAll('.accordeon-title'); // Все заголовки элементов аккордиона, по которым щелкаем для открытия / закрытия контента выбранного элемента
const accordeonItemsContent = document.querySelectorAll('.accordeon-descr'); // Контент всех элементов аккордиона, который открывается, закрывается

// Перебираем заголовки аккордеона, по которым можем щелкнуть
accordeonItems.forEach((element, index) => {
	// Вешаем событие клика на каждый заголовок аккордеона
	element.addEventListener('click', function () {

		// Если у элемента, по которому щелкнули, нет класса активности,
		// if (!accordeonItems[index].classList.contains('accordeon__title--active')) {

		// 	// Пробегаемся по заголовкам элементов аккордеона
		// 	accordeonItems.forEach(element => {
		// 		// удаляем класс активности
		// 		element.classList.remove('accordeon__title--active');
		// 	});

		// 	// Перебираем контент для айтемов аккордиона и скрываем.
		// 	accordeonItemsContent.forEach(element => {
		// 		element.classList.add('accordeon__content--hidden');
		// 	});
		// };

		// Переключаем класс активности элемента, по которому щелкнули
		accordeonItems[index].classList.toggle('toggle');

		// Делаем тоггл для контета элемента, по которому щелкнули
		accordeonItemsContent[index].classList.toggle('toggle');

	});
});// Табы имеют сложную верстку. При клике на кноку таба, у него будут меняться картинка, заголовок, описание, галерея. Причем эти элементы могут не лежать в одной обертке.
const tabsBtn = document.querySelectorAll('.tab-btn-item'); // кнопки табов
const tabsContentItem = document.querySelectorAll('.tabs-content-item'); // текст табов

// Перебираем кнопки табов, по которым можем щелкнуть
tabsBtn.forEach((btn, index) => {
	// Вешаем событие клика на каждую кнопку
	btn.addEventListener('click', function () {
		// Если у кнопки, по которой щелкнули, нет класса активности,
		if (!btn.classList.contains('toggle')) {

			// Пробегаемся по кнопкам
			tabsBtn.forEach(element => {
				// удаляем класс активности
				element.classList.remove('toggle');
				element.classList.add('btn--transparent');
			});

			// Добавляем класс активности на нажатую кнопку
			tabsBtn[index].classList.add('toggle');
			tabsBtn[index].classList.remove('btn--transparent');

			// Пробегаемся по текстам табов
			tabsContentItem.forEach(element => {
				// удаляем класс активности
				element.classList.remove('toggle');
			});

			// Добавляем класс активности на текст таба
			tabsContentItem[index].classList.add('toggle');

		};
	});
});// -include './myscripts/blazy-init.js'
	}
);
